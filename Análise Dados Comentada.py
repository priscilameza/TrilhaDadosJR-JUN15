# -*- coding: utf-8 -*-
"""CodigoCertoCoders

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sQAGvz33kJZYayonoyEYBBnGm5W2w_wo

## Instalando e importando arquivo
"""

### antes de iniciar o código é importante fazer a instalação e importação do jupyter, pandas e matplotlib

pip install notebook

pip install pandas matplotlib seaborn scikit-learn

import pandas as pd

import matplotlib.pyplot as plt

caminho_arquivo = '/content/drive/MyDrive/Colab Notebooks/codigocertocoder.csv'
df = pd.read_csv(caminho_arquivo)

"""##Tratamento dos dados"""

### para iniciar o tratamento dos dados, realizei a visualização dos dados da tabela, identificando a relação entre eles e os tipos de dados

df.head()

df.dtypes

data_tipe = {
    'ID': str
}
df = pd.read_csv(caminho_arquivo, dtype = data_tipe, parse_dates=['Data'])
df.head()

df.dtypes

"""## Desafio 1"""

### o primeiro desafio pede "Calcular a Receita Total gerada pela venda dos cursos"
### considerando que o valor fornecido na tabela é apenas unitário, realizei a criação de nova coluna
### a nova coluna contém a multiplicação do preço unitário e da quantidade de cursos vendidos

df['Total de arrecadação por curso'] = df['Quantidade de Vendas'] * df['Preço Unitário']

df

## identifiquei que os valores da nova coluna foram gerados como str, então realizei a alteração para int

df['Total de arrecadação por curso'] = df['Total de arrecadação por curso'].astype(int)

### para finalizar, realizei a soma simples dos valores na nova coluna, obtendo a receita total
### utilizei o formato float para arredondar para duas casas decimais e facilitar a compreensão

receita_total = df['Total de arrecadação por curso'].astype(float).sum()
print("Receita total:", f"{receita_total:.2f}")

"""##Desafio 2"""

### o desafio 2 pede para identificar o curso com maior número de vendas
### para isso realizei a análise da estatística descritiva (contagem, média, mínimo, máximo e desvio padrão)
### a partir dessa análise identifiquei que a maior quantidade de vendas era 50

df.describe()

### realizei filtragem do código para retornar apenas dos dados dos cursos que possuíssem venda igual a 50

maior_venda = df[df['Quantidade de Vendas'] == 50]
maior_venda

### repeti o mesmo código com >= para garantir que não teria nenhum curso com vendas maiores que 50
# maior_venda = df[df['Quantidade de Vendas'] >= 50]
# maior_venda

"""##Desafio 3"""

### revisualizei a tabela para facilitar a identificação dos dados que fariam sentido nos gráficos
# df

### considerando que cada curso tem apenas uma entrada de data, o valor total vendido por dia é semelhante ao valor total por curso

#grafico 1
df['Total de arrecadação por curso'].plot(kind='bar', title='Valor total vendido por dia')
plt.xlabel('Data')
plt.ylabel= ('Total de arrecadação por curso')
plt.show()

### o segundo gráfico é a representação da quantidade de cursos vendidas por dia

#gráfico 2
df['Quantidade de Vendas'].plot(kind='line', title='Quantidade vendida por dia')
plt.xlabel('Data')
plt.ylabel= ('Quantidade de Vendas')
plt.grid(True)
plt.show()

### o gráfico 3 é um gráfico de dispersão
### permite uma análise crítica mais profunda
### é possível perceber que o curso que teve mais arrecadação (quase 2.250), não foi o que mais vendeu (menos de 25 vendas)
### já o curso com menor arrecadação, também é o curso que menos vendeu

#grafico 3
df.plot.scatter(x='Quantidade de Vendas', y='Total de arrecadação por curso', title='Relação entre Quantidade de Vendas e Total de Arrecadação por Curso')
plt.xlabel('Quantidade de Vendas')
plt.grid(True)
plt.show()

